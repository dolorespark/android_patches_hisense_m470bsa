From: DoloresPark <dolorespark@e-vertise.com>
Date: Fri, 22 Aug 2014 02:43:42 -0400
Subject: add multi-format support using multiple entries in fstab

diff --git a/fs_mgr/Android.mk b/fs_mgr/Android.mk
index 790598a..2fded3d 100644
--- a/fs_mgr/Android.mk
+++ b/fs_mgr/Android.mk
@@ -5,10 +5,10 @@ include $(CLEAR_VARS)
 
 LOCAL_SRC_FILES:= fs_mgr.c fs_mgr_verity.c
 
-LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include external/e2fsprogs/lib
 
 LOCAL_MODULE:= libfs_mgr
-LOCAL_STATIC_LIBRARIES := liblogwrap libmincrypt libext4_utils_static
+LOCAL_STATIC_LIBRARIES := liblogwrap libmincrypt libext4_utils_static libext2_blkid libext2_uuid_static
 LOCAL_C_INCLUDES += system/extras/ext4_utils
 LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include
 
@@ -20,7 +20,7 @@ include $(CLEAR_VARS)
 
 LOCAL_SRC_FILES:= fs_mgr_main.c
 
-LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include external/e2fsprogs/lib
 
 LOCAL_MODULE:= fs_mgr
 
@@ -29,7 +29,8 @@ LOCAL_FORCE_STATIC_EXECUTABLE := true
 LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT)/sbin
 LOCAL_UNSTRIPPED_PATH := $(TARGET_ROOT_OUT_UNSTRIPPED)
 
-LOCAL_STATIC_LIBRARIES := libfs_mgr liblogwrap libcutils liblog libc libmincrypt libext4_utils_static
+LOCAL_STATIC_LIBRARIES := libfs_mgr liblogwrap libcutils liblog libc libmincrypt libext4_utils_static \
+                          libext2_blkid libext2_uuid_static
 
 include $(BUILD_EXECUTABLE)
 
diff --git a/fs_mgr/fs_mgr.c b/fs_mgr/fs_mgr.c
index 071310d..33b7298 100644
--- a/fs_mgr/fs_mgr.c
+++ b/fs_mgr/fs_mgr.c
@@ -12,6 +12,11 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
+ *
+ * 2014-08-21 - Richard Walsh <dolorespark@e-vertise,com>
+ *              added multi-format support for partitions using multiple
+ *              entries in fstab.* for a given mount-point/block-device,
+ *              each with its own filesystem-type and mount options
  */
 
 #include <stdio.h>
@@ -39,6 +44,7 @@
 #include <cutils/partition_utils.h>
 #include <cutils/properties.h>
 #include <logwrap/logwrap.h>
+#include <blkid/blkid.h>
 
 #include "mincrypt/rsa.h"
 #include "mincrypt/sha.h"
@@ -51,6 +57,7 @@
 #define KEY_IN_FOOTER  "footer"
 
 #define E2FSCK_BIN      "/system/bin/e2fsck"
+#define F2FSCK_BIN      "/system/bin/fsck.f2fs"
 #define MKSWAP_BIN      "/system/bin/mkswap"
 
 #define FSCK_LOG_FILE   "/dev/fscklogs/log"
@@ -108,6 +115,8 @@ struct fs_mgr_flag_values {
     unsigned int zram_size;
 };
 
+struct fstab *fs_mgr_edit_fstab(struct fstab *fstab);
+
 /*
  * gettime() - returns the time in seconds of the system's monotonic clock or
  * zero on error.
@@ -423,6 +432,152 @@ struct fstab *fs_mgr_read_fstab(const char *fstab_path)
     }
     fclose(fstab_file);
 
+    fstab = fs_mgr_edit_fstab(fstab);
+
+    return fstab;
+}
+
+/* This scans the fstab for consecutive entries that have the same mount point
+ * and block device but different filesystem types.  For each sequence, it probes
+ * the device to identify the filesystem in use, then searches for an entry with
+ * a matching fs_type.  If found, that entry is preserved, and the first
+ * otherwise-valid entry's values are moved to it's alternate (*2) filesystem
+ * fields.  If no match is found or the fs_type can't be determined (perhaps
+ * because the partition is encrypted), the initial entry is preserved and the
+ * first subsequent entry's values become the alternates.  Finally, the fstab
+ * is reallocated with all duplicate entries removed.
+ */
+
+struct fstab *fs_mgr_edit_fstab(struct fstab *fstab)
+{
+#define MF_DUP  0x80000
+
+    int i, j;
+    int pri, alt, ok;
+    int dup_cnt = 0;
+    struct fstab_rec *recs;
+    char *fstype = NULL;
+
+    for (i = 0; i < fstab->num_entries; i++) {
+        /* skip entries managed by vold */
+        if (fstab->recs[i].fs_mgr_flags & MF_VOLDMANAGED) {
+            continue;
+        }
+
+        /* iterate through subsequent entries with the same mount point as the initial one */
+        pri = alt = ok = -1;
+        for (j = i + 1; j < fstab->num_entries; j++) {
+            if (strcmp(fstab->recs[j].mount_point, fstab->recs[i].mount_point)) {
+                break;
+            }
+
+            /* mark this entry for later (possible) disposal */
+            fstab->recs[j].fs_mgr_flags |= MF_DUP;
+            dup_cnt++;
+
+            /* ignore incompatible and/or duplicate entries */
+            if ((fstab->recs[j].fs_mgr_flags & MF_VOLDMANAGED) ||
+                strcmp(fstab->recs[j].blk_device, fstab->recs[i].blk_device) ||
+                !strcmp(fstab->recs[j].fs_type, fstab->recs[i].fs_type)) {
+                INFO("fs_mgr_edit_fstab - entry %d for %s is invalid",
+                     (j - i) + 1, fstab->recs[i].mount_point);
+                continue;
+            }
+
+            /* if this is the first valid entry that matches, probe for the filesystem */
+            if (ok < 0) {
+                ok = j;
+                fstype = blkid_get_tag_value(NULL, "TYPE", fstab->recs[i].blk_device);
+                INFO("fs_mgr_edit_fstab - found %s filesystem for %s",
+                     (fstype ? fstype : "unknown"), fstab->recs[i].blk_device);
+
+                /* if the filesystem can't be identified or the initial entry's 'fs_type'
+                 * field happens to match, the result is the same:  the initial entry
+                 * becomes the primary entry and this entry becomes the alternate
+                 */
+                if (!fstype || !strcmp(fstype, fstab->recs[i].fs_type)) {
+                    pri = i;
+                    alt = j;
+                }
+            }
+
+            /* if the primary hasn't been set yet and this entry's 'fs_type' matches,
+             * make this one the primary and the initial entry the alternate
+             */
+            if (pri < 0 && !strcmp(fstype, fstab->recs[j].fs_type)) {
+                pri = j;
+                alt = i;
+            }
+            /* even if the primary & alternate have been set, keep going so as
+             * to mark subsequent entries with the same mount point as duplicates
+             */
+        }
+        /* fixup i so it points at the last entry handled (which may be the initial one) */
+        i = j - 1;
+
+        /* if there were no matching valid entries, there's nothing further to do */
+        if (ok < 0) {
+            continue;
+        }
+        /* fstype is only valid if 'ok' is valid */
+        free(fstype);
+
+        /* if the filesystem probe succeeded but no entry's 'fs_type' matched it, set
+         * the initial entry as primary and the first valid subsequent entry as alternate
+         * (perhaps a more activist approach which modifies one of the entries is called for)
+         */
+        if (pri < 0) {
+            pri = i;
+            alt = ok;
+        }
+        /* transfer the alternate entry's fields to the primary entry
+         * then zero those fields to ensure the pointers don't get freed
+         */
+        fstab->recs[pri].blk_device2 = fstab->recs[alt].blk_device;
+        fstab->recs[pri].fs_type2 = fstab->recs[alt].fs_type;
+        fstab->recs[pri].fs_options2 = fstab->recs[alt].fs_options;
+        fstab->recs[pri].flags2 = fstab->recs[alt].flags;
+        fstab->recs[alt].blk_device = 0;
+        fstab->recs[alt].fs_type = 0;
+        fstab->recs[alt].fs_options = 0;
+
+        /* ensure the alternate entry is marked for disposal and the primary isn't */
+        fstab->recs[pri].fs_mgr_flags &= ~MF_DUP;
+        fstab->recs[alt].fs_mgr_flags |= MF_DUP;
+    }
+
+    /* if there were any dups, remove them and replace
+     * the original recs array with a new smaller one
+     */
+    if (dup_cnt) {
+        recs = calloc((fstab->num_entries - dup_cnt), sizeof(struct fstab_rec));
+
+        for (i = 0, j = 0; i < fstab->num_entries; i++) {
+            if (fstab->recs[i].fs_mgr_flags & MF_DUP) {
+                free(fstab->recs[i].blk_device);
+                free(fstab->recs[i].mount_point);
+                free(fstab->recs[i].fs_type);
+                free(fstab->recs[i].fs_options);
+                free(fstab->recs[i].key_loc);
+                free(fstab->recs[i].label);
+            } else {
+                memcpy(&recs[j++], &fstab->recs[i], sizeof(struct fstab_rec));
+            }
+        }
+        free(fstab->recs);
+        fstab->recs = recs;
+        fstab->num_entries -= dup_cnt;
+    }
+
+    /* display the final fstab for debugging purposes */
+#if 0
+    for (i = 0; i < fstab->num_entries; i++) {
+        INFO("  %s  %s - pri= %s  alt= %s", fstab->recs[i].blk_device,
+             fstab->recs[i].mount_point, fstab->recs[i].fs_type,
+             fstab->recs[i].fs_type2 ? fstab->recs[i].fs_type2 : "(none)");
+    }
+#endif
+
     return fstab;
 }
 
@@ -442,7 +597,6 @@ void fs_mgr_free_fstab(struct fstab *fstab)
         free(fstab->recs[i].fs_options);
         free(fstab->recs[i].key_loc);
         free(fstab->recs[i].label);
-        i++;
     }
 
     /* Free the fstab_recs array created by calloc(3) */
@@ -497,6 +651,26 @@ static void check_fs(char *blk_device, char *fs_type, char *target)
             /* No need to check for error in fork, we can't really handle it now */
             ERROR("Failed trying to run %s\n", E2FSCK_BIN);
         }
+
+    } else if (!strcmp(fs_type, "f2fs")) {
+        /* we'll assume fsck.f2fs doesn't have the same issues described above
+         * and skip the test mount - if it does, it's easy enough to add
+         */
+        char *f2fsck_argv[] = {
+            F2FSCK_BIN,
+            blk_device
+        };
+
+        INFO("Running %s on %s\n", F2FSCK_BIN, blk_device);
+
+        ret = android_fork_execvp_ext(ARRAY_SIZE(f2fsck_argv), f2fsck_argv,
+                                      &status, true, LOG_KLOG | LOG_FILE,
+                                      true, FSCK_LOG_FILE);
+
+        if (ret < 0) {
+            /* No need to check for error in fork, we can't really handle it now */
+            ERROR("Failed trying to run %s\n", F2FSCK_BIN);
+        }
     }
 
     return;
@@ -614,6 +788,17 @@ int fs_mgr_mount_all(struct fstab *fstab)
                      fstab->recs[i].fs_type, fstab->recs[i].flags,
                      fstab->recs[i].fs_options);
 
+        if (mret && fstab->recs[i].fs_type2) {
+            if (fstab->recs[i].fs_mgr_flags & MF_CHECK) {
+                check_fs(fstab->recs[i].blk_device2, fstab->recs[i].fs_type2,
+                         fstab->recs[i].mount_point);
+            }
+
+            mret = __mount(fstab->recs[i].blk_device2, fstab->recs[i].mount_point,
+                         fstab->recs[i].fs_type2, fstab->recs[i].flags2,
+                         fstab->recs[i].fs_options2);
+        }
+
         if (!mret) {
             /* Success!  Go get the next one */
             continue;
@@ -701,15 +886,48 @@ int fs_mgr_do_mount(struct fstab *fstab, char *n_name, char *n_blk_device,
         } else {
             m = fstab->recs[i].mount_point;
         }
-        if (__mount(n_blk_device, m, fstab->recs[i].fs_type,
-                    fstab->recs[i].flags, fstab->recs[i].fs_options)) {
-            ERROR("Cannot mount filesystem on %s at %s\n",
-                    n_blk_device, m);
-            goto out;
-        } else {
-            ret = 0;
-            goto out;
+
+        ret = __mount(n_blk_device, m, fstab->recs[i].fs_type,
+                      fstab->recs[i].flags, fstab->recs[i].fs_options);
+        if (ret) {
+            if (fstab->recs[i].fs_type2) {
+                if (fstab->recs[i].fs_mgr_flags & MF_CHECK) {
+                    check_fs(n_blk_device, fstab->recs[i].fs_type2,
+                             fstab->recs[i].mount_point);
+                }
+                ret = __mount(n_blk_device, m, fstab->recs[i].fs_type2,
+                            fstab->recs[i].flags2, fstab->recs[i].fs_options2);
+            }
+
+            if (ret) {
+                ERROR("Cannot mount filesystem on %s at %s\n", n_blk_device, m);
+                ret = -1;
+            } else {
+                char* swap;
+                unsigned long flswap;
+
+                /* if the device could be mounted using fs_type2, swap the
+                 * primary and alternate values so the primary identifies
+                 * the filesystem actually in use
+                 */
+                swap = fstab->recs[i].blk_device;
+                fstab->recs[i].blk_device = fstab->recs[i].blk_device2;
+                fstab->recs[i].blk_device2 = swap;
+
+                swap = fstab->recs[i].fs_type;
+                fstab->recs[i].fs_type = fstab->recs[i].fs_type2;
+                fstab->recs[i].fs_type2 = swap;
+
+                swap = fstab->recs[i].fs_options;
+                fstab->recs[i].fs_options = fstab->recs[i].fs_options2;
+                fstab->recs[i].fs_options2 = swap;
+
+                flswap = fstab->recs[i].flags;
+                fstab->recs[i].flags = fstab->recs[i].flags2;
+                fstab->recs[i].flags2 = flswap;
+            }
         }
+        goto out;
     }
 
     /* We didn't find a match, say so and return an error */
diff --git a/fs_mgr/include/fs_mgr.h b/fs_mgr/include/fs_mgr.h
index 23a4fc4..8f27fb8 100644
--- a/fs_mgr/include/fs_mgr.h
+++ b/fs_mgr/include/fs_mgr.h
@@ -44,6 +44,14 @@ struct fstab_rec {
     int partnum;
     int swap_prio;
     unsigned int zram_size;
+
+    // cwm
+    char *blk_device2;
+    char *fs_type2;
+    char *fs_options2;
+
+    char *lun;
+    unsigned long flags2;
 };
 
 struct fstab *fs_mgr_read_fstab(const char *fstab_path);
diff --git a/init/Android.mk b/init/Android.mk
index abfc68a..bdb261a 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -41,7 +41,9 @@ LOCAL_STATIC_LIBRARIES := \
 	libc \
 	libselinux \
 	libmincrypt \
-	libext4_utils_static
+	libext4_utils_static \
+	libext2_blkid \
+	libext2_uuid_static
 
 include $(BUILD_EXECUTABLE)
 

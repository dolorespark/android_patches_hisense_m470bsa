From: DoloresPark <dolorespark@e-vertise.com>
Date: Sun, 31 Aug 2014 14:32:14 -0400
Subject: updater: add F2FS format and mount support

diff --git a/updater/Android.mk b/updater/Android.mk
index 67e98ec..0321006 100644
--- a/updater/Android.mk
+++ b/updater/Android.mk
@@ -27,6 +27,11 @@ LOCAL_STATIC_LIBRARIES += \
     libz
 endif
 
+ifeq ($(TARGET_USERIMAGES_USE_F2FS), true)
+LOCAL_CFLAGS += -DUSE_F2FS
+LOCAL_STATIC_LIBRARIES += libcm_f2fs_fmt libext2_uuid_static
+endif
+
 LOCAL_STATIC_LIBRARIES += $(TARGET_RECOVERY_UPDATER_LIBS) $(TARGET_RECOVERY_UPDATER_EXTRA_LIBS)
 LOCAL_STATIC_LIBRARIES += libapplypatch libedify libmtdutils libminzip libz
 LOCAL_STATIC_LIBRARIES += libmincrypt libbz
diff --git a/updater/install.c b/updater/install.c
index b6852b0..38795ea 100644
--- a/updater/install.c
+++ b/updater/install.c
@@ -118,8 +118,12 @@ Value* MountFn(const char* name, State* state, int argc, Expr* argv[]) {
         }
         result = mount_point;
     } else {
+        const char *data = "";
+        if (!strcmp(fs_type, "f2fs")) {
+            data = "inline_xattr,background_gc=off";
+        }
         if (mount(location, mount_point, fs_type,
-                  MS_NOATIME | MS_NODEV | MS_NODIRATIME, "") < 0) {
+                  MS_NOATIME | MS_NODEV | MS_NODIRATIME, data) < 0) {
             printf("%s: failed to mount %s at %s: %s\n",
                     name, location, mount_point, strerror(errno));
             result = strdup("");
@@ -203,6 +207,11 @@ done:
 //    if fs_size == 0, then make_ext4fs uses the entire partition.
 //    if fs_size > 0, that is the size to use
 //    if fs_size < 0, then reserve that many bytes at the end of the partition
+
+#ifdef USE_F2FS
+extern int make_f2fs_main(int argc, char **argv);
+#endif
+
 Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
     char* result = NULL;
     if (argc != 5) {
@@ -275,6 +284,29 @@ Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {
         }
         result = location;
 #endif
+#ifdef USE_F2FS
+    } else if (strcmp(fs_type, "f2fs") == 0) {
+        int64_t fs_bytes;
+        int     status;
+        int     arg_cnt = 2;
+        char    len[32];
+        char*   args[] = { "mkfs.f2fs", location, len };
+
+        /* mkfs.f2fs takes its fs_size in sectors and doesn't accept negative values */
+        fs_bytes = atoll(fs_size);
+        if (fs_bytes > 0) {
+            sprintf(len, "%lld", fs_bytes / 512);
+            arg_cnt++;
+        }
+        status = make_f2fs_main(arg_cnt, args);
+        if (status != 0) {
+            printf("%s: mkfs.f2fs failed (%d) on %s",
+                    name, status, location);
+            result = strdup("");
+            goto done;
+        }
+        result = location;
+#endif
     } else {
         printf("%s: unsupported fs_type \"%s\" partition_type \"%s\"",
                 name, fs_type, partition_type);
